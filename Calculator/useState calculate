import React, { useState } from 'react';
import './App.css';

function Calculator() {
  const [operation, setOperation] = useState(null);  // 현재 선택된 연산자를 설정하는 함수 (예: '+', '-', '*', '/')
  const [previousOperand, setPreviousOperand] = useState('');  // 연산을 위해 저장된 이전 숫자를 설정하는 함수
  const [currentOperand, setCurrentOperand] = useState('');  // 화면에 표시되는 현재 숫자를 설정하는 함수

  //setCurrentOperand: 사용자가 현재 입력하고 있는 숫자를 화면에 표시함.
  //예를 들어, 사용자가 7을 누르면, setCurrentOperand는 화면에 7을 보여줌.

//setPreviousOperand: 사용자가 연산자를 누르기 전에 입력한 마지막 숫자를 저장함.
 //예를 들어, 8 +를 누르면, setPreviousOperand는 8을 저장함.

//setOperation: 사용자가 선택한 연산자를 저장함. 예를 들어, +나 -와 같은 연산자를 누르면, setOperation은 해당 연산자를 저장함.

  // 숫자 추가 또는 업데이트
  const appendNumber = (number) => {
    if (number === '.' && currentOperand.includes('.')) return; // 이미 소수점이 있는 경우 중복 방지
    // includes: 현재 표시된 피연산자(currentOperand)에 소수점('.')이 이미 포함되어 있는지 확인합니다.
    setCurrentOperand(currentOperand + number); // 숫자 추가 또는 업데이트
  };
  // currentOperand: 현재까지 화면에 입력된 숫자를 나타냅니다. 예를 들어, 사용자가 '12'를 입력한 경우 currentOperand의 값은 문자열 '12'가 됩니다. 
  // number: 사용자가 방금 누른 숫자 버튼의 값을 나타냅니다. 예를 들어, 사용자가 '3' 버튼을 눌렀다면, number는 '3'이 됩니다.

  
  // 연산자 선택 및 계산 준비
  const chooseOperation = (op) => {
    if (currentOperand === '') return; // 현재 표시된 피연산자가 비어있으면 아무 작업도 수행하지 않습니다.
    
    if (previousOperand !== '') {
      compute(); // 이미 이전 피연산자가 존재하는 경우, 계산을 실행합니다.
    }
  
    setOperation(op); // 선택한 연산자를 설정합니다.
    setPreviousOperand(currentOperand); // 현재 표시된 피연산자를 이전 피연산자로 설정합니다.
    setCurrentOperand(''); // 현재 표시된 피연산자를 초기화합니다.
  };
  
// 계산 실행
const compute = () => {
  let computation;
  const prev = parseFloat(previousOperand); // 이전 피연산자를 부동 소수점 숫자로 변환합니다.
  const current = parseFloat(currentOperand); // 현재 피연산자를 부동 소수점 숫자로 변환합니다.
  if (isNaN(prev) || isNaN(current)) return; // 숫자가 아닌 경우 계산을 수행하지 않습니다.

  // 연산자에 따른 계산 처리
  if (operation === '+') {
    computation = prev + current;
  } else if (operation === '-') {
    computation = prev - current;
  } else if (operation === '*') {
    computation = prev * current;
  } else if (operation === '/') {
    computation = prev / current;
  }

  // 계산 결과 업데이트
  setCurrentOperand(computation.toString()); // 계산 결과를 문자열로 변환하여 현재 피연산자에 설정
  setOperation(null); // 연산자 상태를 초기화
  setPreviousOperand(''); // 이전 피연산자 상태를 초기화
};


 // 디스플레이 클리어
 const clearDisplay = () => {
   setCurrentOperand(''); // 현재 피연산자 상태를 초기화
   setPreviousOperand(''); // 이전 피연산자 상태를 초기화
   setOperation(null); // 연산자 상태를 초기화
 };

  // 마지막 입력 삭제
  const deleteLast = () => {
    setCurrentOperand(currentOperand.slice(0, -1));
  };

  // 'return' 문이 함수 내부에 있도록 확인
  return (
    <div className="calculator">
      <div id="display">{currentOperand || '0'}</div>
      <div className="button-row">
        <button onClick={clearDisplay}>AC</button>
        <button onClick={deleteLast}>DEL</button>
        <button onClick={() => appendNumber('.')}>.</button>
        <button onClick={() => chooseOperation('/')}>/</button>
      </div>
      <div className="button-row">
        <button onClick={() => appendNumber('7')}>7</button>
        <button onClick={() => appendNumber('8')}>8</button>
        <button onClick={() => appendNumber('9')}>9</button>
        <button onClick={() => chooseOperation('*')}>*</button>
      </div>
      <div className="button-row">
        <button onClick={() => appendNumber('4')}>4</button>
        <button onClick={() => appendNumber('5')}>5</button>
        <button onClick={() => appendNumber('6')}>6</button>
        <button onClick={() => chooseOperation('-')}>-</button>
      </div>
      <div className="button-row">
        <button onClick={() => appendNumber('1')}>1</button>
        <button onClick={() => appendNumber('2')}>2</button>
        <button onClick={() => appendNumber('3')}>3</button>
        <button onClick={() => chooseOperation('+')}>+</button>
      </div>
      <div className="button-row">
        <button onClick={() => appendNumber('0')}>0</button>
        <button onClick={() => appendNumber('00')}>00</button>
        <button className="large" onClick={compute}>=</button>
      </div>
    </div>
  );
  }

export default Calculator;
